services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    container_name: authentik_postgresql
    restart: unless-stopped
    networks:
      - web
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env

  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    container_name: authentik_redis
    networks:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.10.6}
    container_name: authentik_server
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.authentik.tls=true"
      - "traefik.http.routers.authentik.tls.certresolver=letsencrypt"

      - "traefik.http.routers.authentik.entrypoints=websecure"
      - "traefik.http.routers.authentik.rule=Host(`auth.maxid.me`) || Host(`prowlarr.media.maxid.me`) || Host(`sonarr.media.maxid.me`) || Host(`radarr.media.maxid.me`) || Host(`torrent.media.maxid.me`)"
    restart: unless-stopped
    command: server
    networks:
      - web
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - media:/media
      - templates:/templates
    env_file:
      - .env
    ports:
      - 9000:9000
      - 9443:9443
    depends_on:
      - postgresql
      - redis
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.10.6}
    container_name: authentik_worker
    restart: unless-stopped
    command: worker
    networks:
      - web
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - media:/media
      - certs:/certs
      - templates:/templates
    env_file:
      - .env
    depends_on:
      - postgresql
      - redis
networks:
  web:
    name: web
    external: true

volumes:
  pgdata:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/maxid/authentik/database'
  redis:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/maxid/authentik/redis'
  media:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/maxid/authentik/media'
  templates:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/maxid/authentik/custom-templates'
  certs:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/home/maxid/authentik/certs'